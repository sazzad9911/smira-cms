{"version":3,"file":"static/js/4594.468c6f09.chunk.js","mappings":"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","sources":["app/member/AddMember.js","../node_modules/bs-custom-file-input/src/selector.js","../node_modules/bs-custom-file-input/src/util.js","../node_modules/bs-custom-file-input/src/eventHandlers.js","../node_modules/bs-custom-file-input/src/index.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport DatePicker from \"react-datepicker\";\r\nimport bsCustomFileInput from 'bs-custom-file-input'\r\nimport Axios from 'axios';\r\nimport {postData, url} from '../../action'\r\nimport { getAuth,createUserWithEmailAndPassword } from 'firebase/auth';\r\nimport app from './../../firebase'; \r\n\r\nconst AddMember = () => {\r\n    const [date,setDate] =React.useState(new Date())\r\n    const [Name, setName]= React.useState()\r\n    const [Type,setType]= React.useState()\r\n    const [Address,setAddress]= React.useState()\r\n    const [File,setFile]= React.useState()\r\n    const [Phone,setPhone]= React.useState()\r\n    const [error,setError]= React.useState('')\r\n    const auth = getAuth(app)\r\n    const [ImageSize,setImageSize]= React.useState(false)\r\n    const [Location,setLocation]= React.useState()\r\n    const [Password,setPassword]= React.useState()\r\n\r\n    const save=() => {\r\n      if(!Name || !Address || !Password ){\r\n        setError('Please fill all the required fields')\r\n        return\r\n      }\r\n      if(Password.length<6){\r\n        setError('Password must be at least 6 characters')\r\n        return\r\n    }\r\n      setError('Please wait...')\r\n        createUserWithEmailAndPassword(auth, Address, Password)\r\n            .then(userCredentials => {\r\n                postData(url + '/setData', {\r\n                    auth: userCredentials.user,\r\n                    tableName: 'user',\r\n                   columns: ['name', 'email', 'uid'],\r\n                   values:[Name,Address,userCredentials.user.uid]\r\n                }).then(data => {\r\n                    setError('Successful! Member has added successfully.')\r\n            }).catch(err => {\r\n                setError('Email address is invalid.')\r\n                console.log(err.message)\r\n            })     \r\n        })\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n          <div className=\"page-header\">\r\n            <h3 className=\"page-title\"> Add Member </h3>\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\"><a href=\"!#\" onClick={event => event.preventDefault()}>Member</a></li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">Add</li>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 grid-margin\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h4 className=\"card-title\">Information</h4>\r\n                  <form className=\"form-sample\">\r\n                    <p className=\"card-description\"> Add new member </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-6\">\r\n                        <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">Name</label>\r\n                          <div className=\"col-sm-9\">\r\n                          <Form.Control onChange={(e)=>setName(e.target.value)} placeholder='Member name'  type=\"text\" />\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                      <div className=\"col-md-6\">\r\n                      {/* <Form.Group className=\"row\">\r\n                      <label className=\"col-sm-3 col-form-label\">Authentication Type</label>\r\n                      <div className=\"col-sm-9\">\r\n                        <select onChange={(e) => setType(e.target.value)} className=\"form-control\">\r\n                        <option value='email'>Email</option>\r\n                          <option value='phone'>Phone</option>\r\n                          \r\n                        </select>\r\n                      </div>\r\n                    </Form.Group> */}\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      {/* <div className=\"col-md-6\">\r\n                      <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">Main Branch Phone Number</label>\r\n                          <div className=\"col-sm-9\">\r\n                          <Form.Control onChange={(e)=>setPhone(e.target.value)} placeholder='eg. +913020394930' type=\"number\" />\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div> */}\r\n                      <div className=\"col-md-6\">\r\n                      <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">{Type=='phone'?'Phone':'Email'}</label>\r\n                          <div className=\"col-sm-9\">\r\n                          <Form.Control onChange={(e)=>setAddress(e.target.value)} placeholder='eg. someone@gmail.com' type=\"email\" />\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div>\r\n                      <div className=\"col-md-6\">\r\n                      <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">Password </label>\r\n                          <div className=\"col-sm-9\">\r\n                          <Form.Control onChange={(e)=>{\r\n                            setPassword(e.target.value);\r\n                           }} name='file' type=\"text\" />\r\n                          </div>\r\n                        </Form.Group>\r\n                        \r\n                      </div>\r\n                      {/* <div className=\"col-md-6\">\r\n                      <Form.Group className=\"row\">\r\n                          <label className=\"col-sm-3 col-form-label\">Main Branch Location</label>\r\n                          <div className=\"col-sm-9\">\r\n                          <Form.Control onChange={(e)=>setLocation(e.target.value)} placeholder='give map link.'  type=\"text\" />\r\n                          </div>\r\n                        </Form.Group>\r\n                      </div> */}\r\n                    </div>\r\n                  </form>\r\n                  {error?(\r\n                    <div className=\"alert alert-primary\" role=\"alert\">{error}</div>\r\n                  ):(\r\n                    <></>\r\n                  )}\r\n                  <button onClick={save}  className='btn btn-gradient-secondary btn-rounded btn-fw'>SAVE</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n};\r\n\r\nexport default AddMember;","const Selector = {\n  CUSTOMFILE: '.custom-file input[type=\"file\"]',\n  CUSTOMFILELABEL: '.custom-file-label',\n  FORM: 'form',\n  INPUT: 'input',\n}\n\nexport default Selector\n","import Selector from './selector'\n\nconst textNodeType = 3\nconst getDefaultText = (input) => {\n  let defaultText = ''\n\n  const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    defaultText = label.textContent\n  }\n\n  return defaultText\n}\n\nconst findFirstChildNode = (element) => {\n  if (element.childNodes.length > 0) {\n    const childNodes = [].slice.call(element.childNodes)\n\n    for (let i = 0; i < childNodes.length; i++) {\n      const node = childNodes[i]\n      if (node.nodeType !== textNodeType) {\n        return node\n      }\n    }\n  }\n\n  return element\n}\n\nconst restoreDefaultText = (input) => {\n  const defaultText = input.bsCustomFileInput.defaultText\n  const label = input.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    const element = findFirstChildNode(label)\n\n    element.textContent = defaultText\n  }\n}\n\nexport {\n  getDefaultText,\n  findFirstChildNode,\n  restoreDefaultText,\n}\n","import { findFirstChildNode, restoreDefaultText } from './util'\nimport Selector from './selector'\n\nconst fileApi = !!window.File\nconst FAKE_PATH = 'fakepath'\nconst FAKE_PATH_SEPARATOR = '\\\\'\n\nconst getSelectedFiles = (input) => {\n  if (input.hasAttribute('multiple') && fileApi) {\n    return [].slice.call(input.files)\n      .map((file) => file.name)\n      .join(', ')\n  }\n\n  if (input.value.indexOf(FAKE_PATH) !== -1) {\n    const splittedValue = input.value.split(FAKE_PATH_SEPARATOR)\n\n    return splittedValue[splittedValue.length - 1]\n  }\n\n  return input.value\n}\n\nfunction handleInputChange() {\n  const label = this.parentNode.querySelector(Selector.CUSTOMFILELABEL)\n\n  if (label) {\n    const element = findFirstChildNode(label)\n    const inputValue = getSelectedFiles(this)\n\n    if (inputValue.length) {\n      element.textContent = inputValue\n    } else {\n      restoreDefaultText(this)\n    }\n  }\n}\n\nfunction handleFormReset() {\n  const customFileList = [].slice.call(this.querySelectorAll(Selector.INPUT))\n    .filter((input) => !!input.bsCustomFileInput)\n\n  for (let i = 0, len = customFileList.length; i < len; i++) {\n    restoreDefaultText(customFileList[i])\n  }\n}\n\nexport {\n  handleInputChange,\n  handleFormReset,\n}\n","import { getDefaultText, restoreDefaultText } from './util'\nimport { handleFormReset, handleInputChange } from './eventHandlers'\nimport Selector from './selector'\n\nconst customProperty = 'bsCustomFileInput'\nconst Event = {\n  FORMRESET   : 'reset',\n  INPUTCHANGE : 'change',\n}\n\nconst bsCustomFileInput = {\n  init(inputSelector = Selector.CUSTOMFILE, formSelector = Selector.FORM) {\n    const customFileInputList = [].slice.call(document.querySelectorAll(inputSelector))\n    const formList = [].slice.call(document.querySelectorAll(formSelector))\n\n    for (let i = 0, len = customFileInputList.length; i < len; i++) {\n      const input = customFileInputList[i]\n\n      Object.defineProperty(input, customProperty, {\n        value: {\n          defaultText: getDefaultText(input),\n        },\n        writable: true,\n      })\n\n      handleInputChange.call(input)\n      input.addEventListener(Event.INPUTCHANGE, handleInputChange)\n    }\n\n    for (let i = 0, len = formList.length; i < len; i++) {\n      formList[i].addEventListener(Event.FORMRESET, handleFormReset)\n      Object.defineProperty(formList[i], customProperty, {\n        value: true,\n        writable: true,\n      })\n    }\n  },\n\n  destroy() {\n    const formList = [].slice.call(document.querySelectorAll(Selector.FORM))\n      .filter((form) => !!form.bsCustomFileInput)\n    const customFileInputList = [].slice.call(document.querySelectorAll(Selector.INPUT))\n      .filter((input) => !!input.bsCustomFileInput)\n\n    for (let i = 0, len = customFileInputList.length; i < len; i++) {\n      const input = customFileInputList[i]\n\n      restoreDefaultText(input)\n      input[customProperty] = undefined\n\n      input.removeEventListener(Event.INPUTCHANGE, handleInputChange)\n    }\n\n    for (let i = 0, len = formList.length; i < len; i++) {\n      formList[i].removeEventListener(Event.FORMRESET, handleFormReset)\n      formList[i][customProperty] = undefined\n    }\n  },\n}\n\nexport default bsCustomFileInput\n"],"names":["React","Date","Name","setName","Type","Address","setAddress","error","setError","auth","getAuth","app","Password","setPassword","className","href","onClick","event","preventDefault","onChange","e","target","value","placeholder","type","name","role","length","createUserWithEmailAndPassword","then","userCredentials","postData","url","user","tableName","columns","values","uid","data","catch","err","console","log","message","Selector","CUSTOMFILE","CUSTOMFILELABEL","FORM","INPUT","textNodeType","getDefaultText","input","defaultText","label","parentNode","querySelector","textContent","findFirstChildNode","element","childNodes","slice","call","i","node","nodeType","restoreDefaultText","bsCustomFileInput","fileApi","window","File","FAKE_PATH","FAKE_PATH_SEPARATOR","getSelectedFiles","hasAttribute","files","map","file","join","indexOf","splittedValue","split","handleInputChange","this","inputValue","handleFormReset","customFileList","querySelectorAll","filter","len","customProperty","Event","FORMRESET","INPUTCHANGE","init","inputSelector","formSelector","customFileInputList","document","formList","Object","defineProperty","writable","addEventListener","destroy","form","undefined","removeEventListener"],"sourceRoot":""}